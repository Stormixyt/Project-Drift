import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import winston from 'winston';

// Logger setup
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] [${level.toUpperCase()}] ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console({ format: winston.format.colorize({ all: true }) })
  ]
});

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Request logging
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`);
  next();
});

// ============================================
// Profile Management (MCP Core)
// ============================================

// Default profile data
const profiles = new Map();

function getDefaultProfile(accountId) {
  return {
    profileRevision: 1,
    profileId: 'athena',
    profileChangesBaseRevision: 1,
    profileChanges: [],
    profileCommandRevision: 1,
    serverTime: new Date().toISOString(),
    responseVersion: 1
  };
}

function getDefaultCommonCore(accountId) {
  return {
    profileRevision: 1,
    profileId: 'common_core',
    profileChangesBaseRevision: 1,
    profileChanges: [],
    profileCommandRevision: 1,
    serverTime: new Date().toISOString(),
    responseVersion: 1
  };
}

// MCP Profile Query
app.post('/fortnite/api/game/v2/profile/:accountId/client/:command', (req, res) => {
  const { accountId, command } = req.params;
  const profileId = req.query.profileId || 'athena';
  
  logger.info(`MCP Command: ${command} for ${accountId} (profile: ${profileId})`);

  // Initialize profile if doesn't exist
  if (!profiles.has(accountId)) {
    profiles.set(accountId, {
      athena: getDefaultProfile(accountId),
      common_core: getDefaultCommonCore(accountId)
    });
  }

  const userProfiles = profiles.get(accountId);
  const profile = userProfiles[profileId] || getDefaultProfile(accountId);

  // Handle different commands
  switch (command) {
    case 'QueryProfile':
      res.json(profile);
      break;
    
    case 'ClientQuestLogin':
      res.json(profile);
      break;
    
    case 'MarkItemSeen':
      res.json(profile);
      break;
    
    case 'SetMtxPlatform':
      res.json(profile);
      break;
    
    case 'SetItemFavoriteStatusBatch':
      res.json(profile);
      break;
    
    case 'EquipBattleRoyaleCustomization':
      res.json(profile);
      break;
    
    default:
      logger.warn(`Unknown MCP command: ${command}`);
      res.json(profile);
  }
});

// ============================================
// Account Services
// ============================================

// OAuth Token Exchange
app.post('/account/api/oauth/token', (req, res) => {
  const grantType = req.body.grant_type;
  logger.info(`OAuth token request: ${grantType}`);

  const accountId = uuidv4();
  const accessToken = `eg1~${Buffer.from(accountId).toString('base64')}`;
  
  res.json({
    access_token: accessToken,
    expires_in: 28800,
    expires_at: new Date(Date.now() + 28800000).toISOString(),
    token_type: 'bearer',
    refresh_token: `eg1~${Buffer.from(uuidv4()).toString('base64')}`,
    refresh_expires: 86400,
    refresh_expires_at: new Date(Date.now() + 86400000).toISOString(),
    account_id: accountId,
    client_id: 'ec684b8c687f479fadea3cb2ad83f5c6',
    internal_client: true,
    client_service: 'fortnite',
    displayName: 'ProjectDriftPlayer',
    app: 'fortnite',
    in_app_id: accountId,
    device_id: uuidv4()
  });
});

// Verify token
app.get('/account/api/oauth/verify', (req, res) => {
  const auth = req.headers.authorization;
  if (!auth) {
    return res.status(401).json({ error: 'Missing authorization' });
  }

  const token = auth.replace('Bearer ', '');
  const accountId = uuidv4();
  
  res.json({
    token,
    session_id: uuidv4(),
    token_type: 'bearer',
    client_id: 'ec684b8c687f479fadea3cb2ad83f5c6',
    internal_client: true,
    client_service: 'fortnite',
    account_id: accountId,
    expires_in: 28800,
    expires_at: new Date(Date.now() + 28800000).toISOString(),
    auth_method: 'exchange_code',
    displayName: 'ProjectDriftPlayer',
    app: 'fortnite',
    in_app_id: accountId
  });
});

// Account info
app.get('/account/api/public/account/:accountId', (req, res) => {
  const { accountId } = req.params;
  
  res.json({
    id: accountId,
    displayName: 'ProjectDriftPlayer',
    name: 'ProjectDrift',
    email: 'player@projectdrift.local',
    failedLoginAttempts: 0,
    lastLogin: new Date().toISOString(),
    numberOfDisplayNameChanges: 0,
    ageGroup: 'UNKNOWN',
    headless: false,
    country: 'US',
    lastName: 'Player',
    preferredLanguage: 'en',
    canUpdateDisplayName: true,
    tfaEnabled: false,
    emailVerified: true,
    minorVerified: false,
    minorExpected: false,
    minorStatus: 'UNKNOWN'
  });
});

// Multiple accounts lookup
app.get('/account/api/public/account', (req, res) => {
  const accountIds = req.query.accountId;
  const ids = Array.isArray(accountIds) ? accountIds : [accountIds];
  
  const accounts = ids.map(id => ({
    id,
    displayName: 'ProjectDriftPlayer',
    externalAuths: {}
  }));
  
  res.json(accounts);
});

// External auths
app.get('/account/api/public/account/:accountId/externalAuths', (req, res) => {
  res.json([]);
});

// ============================================
// CloudStorage (Config Files)
// ============================================

const cloudStorage = new Map();

app.get('/fortnite/api/cloudstorage/system', (req, res) => {
  res.json([
    {
      uniqueFilename: 'DefaultGame.ini',
      filename: 'DefaultGame.ini',
      hash: '603a8c931c6e7fc11e8184e31a5d9fd0',
      hash256: '603a8c931c6e7fc11e8184e31a5d9fd0',
      length: 0,
      contentType: 'application/octet-stream',
      uploaded: new Date().toISOString(),
      storageType: 'S3',
      doNotCache: false
    }
  ]);
});

app.get('/fortnite/api/cloudstorage/system/:filename', (req, res) => {
  const { filename } = req.params;
  logger.info(`CloudStorage request: ${filename}`);
  
  // Return empty config (Fortnite will use defaults)
  res.setHeader('Content-Type', 'application/octet-stream');
  res.send('');
});

app.get('/fortnite/api/cloudstorage/user/:accountId', (req, res) => {
  res.json([]);
});

app.get('/fortnite/api/cloudstorage/user/:accountId/:filename', (req, res) => {
  res.setHeader('Content-Type', 'application/octet-stream');
  res.send('');
});

// ============================================
// Matchmaking Services
// ============================================

app.get('/fortnite/api/game/v2/matchmakingservice/ticket/player/:accountId', (req, res) => {
  res.status(200).end();
});

app.get('/fortnite/api/matchmaking/session/:sessionId', (req, res) => {
  res.json({
    id: req.params.sessionId,
    ownerId: uuidv4(),
    ownerName: 'ProjectDriftPlayer',
    serverName: 'Project Drift Server',
    serverAddress: '127.0.0.1',
    serverPort: 7777,
    maxPublicPlayers: 100,
    openPublicPlayers: 100,
    maxPrivatePlayers: 0,
    openPrivatePlayers: 0,
    attributes: {},
    publicPlayers: [],
    privatePlayers: [],
    totalPlayers: 0,
    allowJoinInProgress: true,
    shouldAdvertise: true,
    isDedicated: false,
    usesStats: false,
    allowInvites: true,
    usesPresence: false,
    allowJoinViaPresence: true,
    allowJoinViaPresenceFriendsOnly: false,
    buildUniqueId: '0',
    lastUpdated: new Date().toISOString(),
    started: false
  });
});

// ============================================
// Content & Catalog
// ============================================

app.get('/fortnite/api/calendar/v1/timeline', (req, res) => {
  res.json({
    channels: {
      'client-matchmaking': {
        states: [],
        cacheExpire: new Date(Date.now() + 3600000).toISOString()
      },
      'client-events': {
        states: [{
          validFrom: '2020-01-01T00:00:00.000Z',
          activeEvents: [],
          state: {
            activeStorefronts: [],
            eventNamedWeights: {},
            seasonNumber: 1,
            seasonTemplateId: 'Season1',
            matchXpBonusPoints: 0,
            seasonBegin: '2020-01-01T00:00:00Z',
            seasonEnd: '2030-01-01T00:00:00Z',
            seasonDisplayedEnd: '2030-01-01T00:00:00Z',
            weeklyStoreEnd: '2030-01-01T00:00:00Z',
            stwEventStoreEnd: '2030-01-01T00:00:00Z',
            stwWeeklyStoreEnd: '2030-01-01T00:00:00Z',
            dailyStoreEnd: '2030-01-01T00:00:00Z'
          }
        }],
        cacheExpire: new Date(Date.now() + 3600000).toISOString()
      }
    },
    eventsTimeOffsetHrs: 0,
    cacheIntervalMins: 10,
    currentTime: new Date().toISOString()
  });
});

app.get('/fortnite/api/storefront/v2/catalog', (req, res) => {
  res.json({
    refreshIntervalHrs: 24,
    dailyPurchaseHrs: 24,
    expiration: new Date(Date.now() + 86400000).toISOString(),
    storefronts: []
  });
});

app.get('/fortnite/api/storefront/v2/keychain', (req, res) => {
  res.json([]);
});

// Content pages
app.get('/content/api/pages/fortnite-game', (req, res) => {
  res.json({
    _title: 'Fortnite Game',
    _activeDate: '2020-01-01T00:00:00.000Z',
    lastModified: new Date().toISOString(),
    _locale: 'en-US',
    battleroyalenews: {
      news: {
        motds: []
      }
    },
    emergencynotice: {
      news: {
        platform_messages: [],
        _type: 'Battle Royale News',
        messages: []
      }
    },
    survivalmessage: {
      _type: 'Survival Message',
      title: 'Project Drift',
      body: 'Welcome to Project Drift! Custom Fortnite server hosting platform.'
    }
  });
});

// ============================================
// Friends & Presence
// ============================================

app.get('/friends/api/public/friends/:accountId', (req, res) => {
  res.json([]);
});

app.get('/friends/api/v1/:accountId/summary', (req, res) => {
  res.json({
    friends: [],
    incoming: [],
    outgoing: [],
    suggested: []
  });
});

app.get('/presence/api/v1/_/:accountId/settings/subscriptions', (req, res) => {
  res.status(204).end();
});

// ============================================
// Lightswitch (Service Status)
// ============================================

app.get('/lightswitch/api/service/bulk/status', (req, res) => {
  res.json([
    {
      serviceInstanceId: 'fortnite',
      status: 'UP',
      message: 'Project Drift MCP is running',
      maintenanceUri: null,
      allowedActions: ['PLAY', 'DOWNLOAD'],
      banned: false,
      launcherInfoDTO: {
        appName: 'Fortnite',
        catalogItemId: '4fe75bbc5a674f4f9b356b5c90567da5',
        namespace: 'fn'
      }
    }
  ]);
});

app.get('/lightswitch/api/service/Fortnite/status', (req, res) => {
  res.json({
    serviceInstanceId: 'fortnite',
    status: 'UP',
    message: 'Project Drift MCP is running',
    maintenanceUri: null,
    allowedActions: ['PLAY', 'DOWNLOAD'],
    banned: false
  });
});

// ============================================
// Version & Hotfix
// ============================================

app.get('/fortnite/api/v2/versioncheck/:platform', (req, res) => {
  res.json({
    type: 'NO_UPDATE'
  });
});

app.get('/fortnite/api/versioncheck', (req, res) => {
  res.json({
    type: 'NO_UPDATE'
  });
});

// ============================================
// Stats & Leaderboards
// ============================================

app.post('/statsproxy/api/statsv2/account/:accountId', (req, res) => {
  res.json([]);
});

app.post('/fortnite/api/stats/accountId/:accountId/bulk/window/alltime', (req, res) => {
  res.json({});
});

// ============================================
// Datarouter (Analytics)
// ============================================

app.post('/datarouter/api/v1/public/data', (req, res) => {
  res.status(204).end();
});

app.post('/api/v1/events/Fortnite/FlowStormtrace/:accountId', (req, res) => {
  res.status(204).end();
});

// ============================================
// Receipts & Purchases
// ============================================

app.get('/fortnite/api/receipts/v1/account/:accountId/receipts', (req, res) => {
  res.json([]);
});

// ============================================
// Platform (Epic Services)
// ============================================

app.get('/platform/api/v1/eula/agreements/:eulaId/account/:accountId', (req, res) => {
  res.json({
    accountId: req.params.accountId,
    locale: 'en-US',
    eulaId: req.params.eulaId,
    accepted: true
  });
});

// ============================================
// Settings
// ============================================

app.get('/fortnite/api/game/v2/privacy/account/:accountId', (req, res) => {
  res.json({
    accountId: req.params.accountId,
    optOutOfPublicLeaderboards: false
  });
});

// ============================================
// Catch-all for unknown endpoints
// ============================================

app.use((req, res) => {
  logger.warn(`Unknown endpoint: ${req.method} ${req.path}`);
  res.status(200).json({});
});

// ============================================
// Start Server
// ============================================

const PORT = process.env.MCP_PORT || 3551;

app.listen(PORT, '0.0.0.0', () => {
  logger.info('═══════════════════════════════════════════════════');
  logger.info('   🚀 Project Drift MCP Backend');
  logger.info('   📡 Project Reboot Style Implementation');
  logger.info('═══════════════════════════════════════════════════');
  logger.info(`   Server running on: http://localhost:${PORT}`);
  logger.info(`   Epic services emulated: ✓`);
  logger.info(`   Profile management: ✓`);
  logger.info(`   CloudStorage: ✓`);
  logger.info(`   Matchmaking: ✓`);
  logger.info('═══════════════════════════════════════════════════');
  logger.info('   Fortnite will connect to this instead of Epic');
  logger.info('   Make sure to update your hosts file!');
  logger.info('═══════════════════════════════════════════════════\n');
});
