name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Rust Game Server
  test-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            server/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Tests
        working-directory: ./server
        run: cargo test --verbose
      
      - name: Run Clippy
        working-directory: ./server
        run: cargo clippy -- -D warnings

  # Test Matchmaking Service
  test-matchmaking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: matchmaking/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./matchmaking
        run: npm ci
      
      - name: Lint
        working-directory: ./matchmaking
        run: npm run lint
      
      - name: Build
        working-directory: ./matchmaking
        run: npm run build

  # Test Admin Dashboard
  test-admin:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: admin/package-lock.json
      
      - name: Install Dependencies
        working-directory: ./admin
        run: npm ci
      
      - name: Lint
        working-directory: ./admin
        run: npm run lint
      
      - name: Build
        working-directory: ./admin
        run: npm run build

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-server, test-matchmaking, test-admin]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Server Image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./docker/server.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest
      
      - name: Build and Push Matchmaking Image
        uses: docker/build-push-action@v5
        with:
          context: ./matchmaking
          file: ./docker/matchmaking.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/matchmaking:latest
      
      - name: Build and Push Admin Image
        uses: docker/build-push-action@v5
        with:
          context: ./admin
          file: ./docker/admin.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:latest

  # Build Unity Client (Windows)
  build-unity-client:
    runs-on: windows-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: client/unity/Library
          key: Library-${{ hashFiles('client/unity/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: Library-
      
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: client/unity
          targetPlatform: StandaloneWindows64
          buildName: ProjectDrift
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: unity-client-windows
          path: build/StandaloneWindows64/
      
      - name: Create Installer
        run: |
          iscc release/installer.iss
        if: runner.os == 'Windows'
      
      - name: Upload Installer to Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: release/Output/ProjectDrift-Setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          manifests: |
            k8s/server-deployment.yaml
            k8s/matchmaking-deployment.yaml
            k8s/admin-deployment.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/matchmaking:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:latest
          kubectl-version: 'latest'
